/*             
 * 			  (                       
 *			 ( )\         (        (   
 *			 )((_)  (    ))\ (    ))\  
 *			((_)_   )\  /((_))\  /((_) 
 *			 | _ ) ((_)(_)) ((_)(_))   
 *			 | _ \/ _ \/ -_)(_-</ -_)  
 *			 |___/\___/\___|/__/\___|
 *       
 *           			;            
 *		      +        ;;;         + 
 *			  +       ;;;;;        + 
 *			  +      ;;;;;;;       + 
 *			  ++    ;;;;;;;;;     ++ 
 *			  +++++;;;;;;;;;;;+++++  
 *			   ++++;;;;;;;;;;;+++++  
 *				++;;;;;;;;;;;;;++    
 *			     ;;;;;;;;;;;;;;;     
 *			    ;;;;;;;;;;;;;;;;;     
 *				:::::::::::::::::    
 * 				:::::::::::::::::      
 *  			:::::::::::::::::    
 *   			::::::@@@@@::::::    
 *				:::::@:::::@:::::    
 *				::::@:::::::@::::    
 * 				:::::::::::::::::    
 *  			:::::::::::::::::      
 */



package de.bo.aid.boese.modelJPA;

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import de.bo.aid.boese.constants.Status;

// TODO: Auto-generated Javadoc
/**
 * DeviceComponent Model for Hibernate generated by hbm2java.
 */
public class DeviceComponent implements java.io.Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The DeviceComponent id. */
	private int deCoId;
	
	/** The linked component. */
	private Component component;
	
	/** The linked device. */
	private Device device;
	
	/** The status of the DeviceComponent. */
	private Integer status;
	
	/** The description. */
	private String description;
	
	/** The rule how this DeviceComponent will be Logged. */
	private BigDecimal logRule;
	
	/** The current value. */
	private BigDecimal currentValue;
	
	/** The min value. */
	private BigDecimal minValue;
	
	/** The max value. */
	private BigDecimal maxValue;
	
	/**  will this DeviceComponent logged. */
	private boolean loggen;
	
	/** The earlier DeviceComponents. */
	private Set<DeviceComponenteReplace> deviceComponenteReplacesForDeCoId = new HashSet<DeviceComponenteReplace>(0);
	
	/** The history log of this device components. */
	private Set<HistoryLogDeviceComponent> historyLogDeviceComponents = new HashSet<HistoryLogDeviceComponent>(0);
	
	/** The earlier DeviceComponents. */
	private Set<DeviceComponenteReplace> deviceComponenteReplacesForDeCoIdreplaced = new HashSet<DeviceComponenteReplace>(0);
	
	/** The log of this device components. */
	private Set<LogDeviceComponent> logDeviceComponents = new HashSet<LogDeviceComponent>(0);
	
	/** The ToDos. */
	private Set<RepeatRule> repeatRule = new HashSet<RepeatRule>(0);

	/**
	 * Instantiates a new device component.
	 */
	public DeviceComponent() {
	
	}
	
	/**
	 * Instantiates a new device component only with ID.
	 *
	 * @param deCoId the DeviceComponent id
	 */
	public DeviceComponent(int deCoId){
		this.deCoId = deCoId;
	}

	/**
	 * Instantiates a new device component for DB Insert.
	 *
	 * @param description the description
	 * @param minValue the min Value
	 * @param maxValue the max Value
	 * @param loggen should it be logged
	 */
	public DeviceComponent(String description, double minValue, double maxValue, boolean loggen) {
		this.description = description;
		this.status = Status.ACTIVE;
		this.minValue = BigDecimal.valueOf(minValue);
		this.maxValue = BigDecimal.valueOf(maxValue);
		this.loggen = loggen;
	}

	/**
	 * Instantiates a new device component.
	 *
	 * @param deCoId the DeviceComponent id
	 * @param component the component
	 * @param device the device
	 */
	public DeviceComponent(int deCoId, Component component, Device device) {
		this.deCoId = deCoId;
		this.component = component;
		this.device = device;
	}

	/**
	 * Instantiates a new device component with all parameters and all foreign keys.
	 *
	 * @param deCoId the DeviceComponent id
	 * @param component the linked component
	 * @param device the linked device
	 * @param status the status of the DeviceComponent
	 * @param description the description
	 * @param logRule the rule how this DeviceComponent will be logged
	 * @param currentValue the current value
	 * @param minValue the min Value
	 * @param maxValue the max Value
	 * @param loggen should it be logged
	 * @param deviceComponenteReplacesForDeCoId the device componente replaces for DeviceComponent id
	 * @param historyLogDeviceComponents the history log of the deviceComponent
	 * @param deviceComponenteReplacesForDeCoIdreplaced the device componente replaces for DeviceComponent idreplaced
	 * @param logDeviceComponents the log of the deviceComponent
	 * @param repeatRule the repeatRule
	 */
	public DeviceComponent(int deCoId, Component component, Device device, Integer status, String description,
			BigDecimal logRule, BigDecimal currentValue, double minValue, double maxValue, 
			boolean loggen, Set<DeviceComponenteReplace> deviceComponenteReplacesForDeCoId,
			Set<HistoryLogDeviceComponent> historyLogDeviceComponents, Set<DeviceComponenteReplace> deviceComponenteReplacesForDeCoIdreplaced,
			Set<LogDeviceComponent> logDeviceComponents, Set<RepeatRule> repeatRule) {
		this.deCoId = deCoId;
		this.component = component;
		this.device = device;
		this.status = status;
		this.description = description;
		this.logRule = logRule;
		this.currentValue = currentValue;
		this.minValue = BigDecimal.valueOf(minValue);
		this.maxValue = BigDecimal.valueOf(maxValue);
		this.loggen = loggen;
		this.deviceComponenteReplacesForDeCoId = deviceComponenteReplacesForDeCoId;
		this.historyLogDeviceComponents = historyLogDeviceComponents;
		this.deviceComponenteReplacesForDeCoIdreplaced = deviceComponenteReplacesForDeCoIdreplaced;
		this.logDeviceComponents = logDeviceComponents;
		this.repeatRule = repeatRule;
	}

	/**
	 * Gets the DeviceComponent id.
	 *
	 * @return the DeviceComponent id
	 */
	public int getDeCoId() {
		return this.deCoId;
	}

	/**
	 * Sets the DeviceComponent id.
	 *
	 * @param deCoId the new DeviceComponent id
	 */
	public void setDeCoId(int deCoId) {
		this.deCoId = deCoId;
	}

	/**
	 * Gets the linked component.
	 *
	 * @return the linked component
	 */
	public Component getComponent() {
		return this.component;
	}

	/**
	 * Sets the linked component.
	 *
	 * @param component the new linked component
	 */
	public void setComponent(Component component) {
		this.component = component;
	}

	/**
	 * Gets the linked device.
	 *
	 * @return the linked device
	 */
	public Device getDevice() {
		return this.device;
	}

	/**
	 * Sets the linked device.
	 *
	 * @param device the new linked device
	 */
	public void setDevice(Device device) {
		this.device = device;
	}

	/**
	 * Gets the status.
	 *
	 * @return the status
	 */
	public Integer getStatus() {
		return this.status;
	}

	/**
	 * Sets the status.
	 *
	 * @param status the new status
	 */
	public void setStatus(Integer status) {
		this.status = status;
	}

	/**
	 * Gets the description.
	 *
	 * @return the description
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * Sets the description.
	 *
	 * @param description the new description
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * Gets the rule how it will be logged.
	 *
	 * @return a BigDecimal Code of the Logrule
	 */
	public BigDecimal getLogRule() {
		return this.logRule;
	}

	/**
	 * Sets the rule how it will be logged.
	 *
	 * @param logRule the new log rule
	 */
	public void setLogRule(BigDecimal logRule) {
		this.logRule = logRule;
	}

	/**
	 * Gets the current value.
	 *
	 * @return the current value
	 */
	public BigDecimal getCurrentValue() {
		return this.currentValue;
	}

	/**
	 * Sets the current value.
	 *
	 * @param currentValue the new current value
	 */
	public void setCurrentValue(BigDecimal currentValue) {
		this.currentValue = currentValue;
	}

	/**
	 * Gets the min value.
	 *
	 * @return the min value
	 */
	public BigDecimal getMinValue() {
		return minValue;
	}

	/**
	 * Sets the min value.
	 *
	 * @param minValue the new min value
	 */
	public void setMinValue(BigDecimal minValue) {
		this.minValue = minValue;
	}

	/**
	 * Gets the max value.
	 *
	 * @return the max value
	 */
	public BigDecimal getMaxValue() {
		return maxValue;
	}

	/**
	 * Sets the max value.
	 *
	 * @param maxValue the new max value
	 */
	public void setMaxValue(BigDecimal maxValue) {
		this.maxValue = maxValue;
	}

	/**
	 * Checks if is loggen.
	 *
	 * @return true, if is loggen
	 */
	public boolean isLoggen() {
		return loggen;
	}

	/**
	 * Sets the loggen.
	 *
	 * @param loggen the new loggen
	 */
	public void setLoggen(boolean loggen) {
		this.loggen = loggen;
	}

	/**
	 * Gets the device componente replaces for DeviceComponent id.
	 *
	 * @return the device componente replaces for DeviceComponent id
	 */
	public Set<DeviceComponenteReplace> getDeviceComponenteReplacesForDeCoId() {
		return this.deviceComponenteReplacesForDeCoId;
	}

	/**
	 * Sets the device componente replaces for DeviceComponent id.
	 *
	 * @param deviceComponenteReplacesForDeCoId the new device componente replaces for DeviceComponent id
	 */
	public void setDeviceComponenteReplacesForDeCoId(Set<DeviceComponenteReplace> deviceComponenteReplacesForDeCoId) {
		this.deviceComponenteReplacesForDeCoId = deviceComponenteReplacesForDeCoId;
	}

	/**
	 * Gets the history log of the deviceComponent.
	 *
	 * @return the history log of the deviceComponent
	 */
	public Set<HistoryLogDeviceComponent> getHistoryLogDeviceComponents() {
		return this.historyLogDeviceComponents;
	}

	/**
	 * Sets the history log of the deviceComponent.
	 *
	 * @param historyLogDeviceComponents the new history log of the deviceComponent
	 */
	public void setHistoryLogDeviceComponents(Set<HistoryLogDeviceComponent> historyLogDeviceComponents) {
		this.historyLogDeviceComponents = historyLogDeviceComponents;
	}

	/**
	 * Gets the device componente replaces for DeviceComponent idreplaced.
	 *
	 * @return the device componente replaces for DeviceComponent idreplaced
	 */
	public Set<DeviceComponenteReplace> getDeviceComponenteReplacesForDeCoIdreplaced() {
		return this.deviceComponenteReplacesForDeCoIdreplaced;
	}

	/**
	 * Sets the device componente replaces for DeviceComponent idreplaced.
	 *
	 * @param deviceComponenteReplacesForDeCoIdreplaced the new device componente replaces for DeviceComponent idreplaced
	 */
	public void setDeviceComponenteReplacesForDeCoIdreplaced(Set<DeviceComponenteReplace> deviceComponenteReplacesForDeCoIdreplaced) {
		this.deviceComponenteReplacesForDeCoIdreplaced = deviceComponenteReplacesForDeCoIdreplaced;
	}

	/**
	 * Gets the log of the deviceComponent.
	 *
	 * @return the log of the deviceComponent
	 */
	public Set<LogDeviceComponent> getLogDeviceComponents() {
		return this.logDeviceComponents;
	}

	/**
	 * Sets the log of the deviceComponent.
	 *
	 * @param logDeviceComponents the new log of the deviceComponent
	 */
	public void setLogDeviceComponents(Set<LogDeviceComponent> logDeviceComponents) {
		this.logDeviceComponents = logDeviceComponents;
	}

	/**
	 * Gets the repeat rule.
	 *
	 * @return the repeat rule
	 */
	public Set<RepeatRule> getRepeatRule() {
		return repeatRule;
	}

	/**
	 * Sets the repeat rule.
	 *
	 * @param repeatRule the new repeat rule
	 */
	public void setRepeatRule(Set<RepeatRule> repeatRule) {
		this.repeatRule = repeatRule;
	}

	/**
	 *  
	 * To compare two DeviceComponents.
	 *
	 * @param obj the DeviceComponent object to compare
	 * @return true if both DeviceComponents are equal
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DeviceComponent other = (DeviceComponent) obj;
		if (component == null) {
			if (other.component != null)
				return false;
		} else if (!component.equals(other.component))
			return false;
		if (currentValue == null) {
			if (other.currentValue != null)
				return false;
		} else if (!currentValue.equals(other.currentValue))
			return false;
		if (deCoId != other.deCoId)
			return false;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (device == null) {
			if (other.device != null)
				return false;
		} else if (!device.equals(other.device))
			return false;
		if (deviceComponenteReplacesForDeCoId == null) {
			if (other.deviceComponenteReplacesForDeCoId != null)
				return false;
		} else if (!deviceComponenteReplacesForDeCoId.equals(other.deviceComponenteReplacesForDeCoId))
			return false;
		if (deviceComponenteReplacesForDeCoIdreplaced == null) {
			if (other.deviceComponenteReplacesForDeCoIdreplaced != null)
				return false;
		} else if (!deviceComponenteReplacesForDeCoIdreplaced.equals(other.deviceComponenteReplacesForDeCoIdreplaced))
			return false;
		if (historyLogDeviceComponents == null) {
			if (other.historyLogDeviceComponents != null)
				return false;
		} else if (!historyLogDeviceComponents.equals(other.historyLogDeviceComponents))
			return false;
		if (logDeviceComponents == null) {
			if (other.logDeviceComponents != null)
				return false;
		} else if (!logDeviceComponents.equals(other.logDeviceComponents))
			return false;
		if (logRule == null) {
			if (other.logRule != null)
				return false;
		} else if (!logRule.equals(other.logRule))
			return false;
		if (repeatRule == null) {
			if (other.repeatRule != null)
				return false;
		} else if (!repeatRule.equals(other.repeatRule))
			return false;
		if (status == null) {
			if (other.status != null)
				return false;
		} else if (!status.equals(other.status))
			return false;
		return true;
	}

}
