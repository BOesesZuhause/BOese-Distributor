/*             
 * 			  (                       
 *			 ( )\         (        (   
 *			 )((_)  (    ))\ (    ))\  
 *			((_)_   )\  /((_))\  /((_) 
 *			 | _ ) ((_)(_)) ((_)(_))   
 *			 | _ \/ _ \/ -_)(_-</ -_)  
 *			 |___/\___/\___|/__/\___|
 *       
 *           			;            
 *		      +        ;;;         + 
 *			  +       ;;;;;        + 
 *			  +      ;;;;;;;       + 
 *			  ++    ;;;;;;;;;     ++ 
 *			  +++++;;;;;;;;;;;+++++  
 *			   ++++;;;;;;;;;;;+++++  
 *				++;;;;;;;;;;;;;++    
 *			     ;;;;;;;;;;;;;;;     
 *			    ;;;;;;;;;;;;;;;;;     
 *				:::::::::::::::::    
 * 				:::::::::::::::::      
 *  			:::::::::::::::::    
 *   			::::::@@@@@::::::    
 *				:::::@:::::@:::::    
 *				::::@:::::::@::::    
 * 				:::::::::::::::::    
 *  			:::::::::::::::::      
 */



package de.bo.aid.boese.modelJPA;

import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;

// TODO: Auto-generated Javadoc
/**
 * LogDeviceComponent Model for Hibernate generated by hbm2java.
 */
public class LogDeviceComponent implements java.io.Serializable {

	/** The Constant serialVersionUID. */
	@Transient
	private static final long serialVersionUID = 1L;

	/** The LogDeviceComponent id. */
	@Id
	@GeneratedValue
	private int loCoId;
	
	/** The timestamp when it was switched. */
	@Column(nullable = false)
	private Date timestamp;
	
	/** The device belonging DeviceComponent. */
	@ManyToOne(cascade = {CascadeType.ALL}, fetch = FetchType.LAZY)
	@JoinColumn(name = "deviceComponent", nullable = false)
	private DeviceComponent deviceComponent;
	
	/** The value which was executed. */
	@Column(precision = 25, scale = 10)
	private BigDecimal value;

	/**
	 * Instantiates a new log device component.
	 */
	public LogDeviceComponent() {
	}

	/**
	 * Instantiates a new log device component.
	 *
	 * @param loCoId the LogDeviceComponent id
	 * @param deviceComponent the device component
	 * @param value the value
	 */
	public LogDeviceComponent(int loCoId, DeviceComponent deviceComponent, BigDecimal value) {
		this.loCoId = loCoId;
		this.deviceComponent = deviceComponent;
		this.value = value;
	}

	/**
	 * Gets the LogDeviceComponent id.
	 *
	 * @return the LogDeviceComponent id
	 */
	public int getLoCoId() {
		return this.loCoId;
	}

	/**
	 * Sets the LogDeviceComponent id.
	 *
	 * @param loCoId the new LogDeviceComponent id
	 */
	public void setLoCoId(int loCoId) {
		this.loCoId = loCoId;
	}

	/**
	 * Gets the timestamp when it was switched.
	 *
	 * @return the timestamp when it was switched
	 */
	public Date getTimestamp() {
		return this.timestamp;
	}

	/**
	 * Sets the timestamp when it was switched.
	 *
	 * @param timestamp the new timestamp when it was switched
	 */
	public void setTimestamp(Date timestamp) {
		this.timestamp = timestamp;
	}

	/**
	 * Gets the belonging DeviceComponent.
	 *
	 * @return the belonging DeviceComponent
	 */
	public DeviceComponent getDeviceComponent() {
		return this.deviceComponent;
	}

	/**
	 * Sets the belonging DeviceComponent.
	 *
	 * @param deviceComponent the new belonging DeviceComponent
	 */
	public void setDeviceComponent(DeviceComponent deviceComponent) {
		this.deviceComponent = deviceComponent;
	}

	/**
	 * Gets the value which was switched.
	 *
	 * @return the value which was switched
	 */
	public BigDecimal getValue() {
		return this.value;
	}

	/**
	 * Sets the value which was switched.
	 *
	 * @param value the new value which was switched
	 */
	public void setValue(BigDecimal value) {
		this.value = value;
	}

	/**
	 *  
	 * To compare two LogDeviceComponents.
	 *
	 * @param obj the LogDeviceComponent object to compare
	 * @return true if both LogDeviceComponents are equal
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		LogDeviceComponent other = (LogDeviceComponent) obj;
		if (deviceComponent == null) {
			if (other.deviceComponent != null)
				return false;
		} else if (!deviceComponent.equals(other.deviceComponent))
			return false;
		if (loCoId != other.loCoId)
			return false;
		if (timestamp == null) {
			if (other.timestamp != null)
				return false;
		} else if (!timestamp.equals(other.timestamp))
			return false;
		if (value == null) {
			if (other.value != null)
				return false;
		} else if (!value.equals(other.value))
			return false;
		return true;
	}
}